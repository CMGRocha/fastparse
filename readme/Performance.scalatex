@import Main._
@sect{Performance}
    @p
        FastParse will never be able to compete with hand-written recursive
        descent parsers for speed, but for most use cases it is plenty fast
        enough. Here's a comparison of FastParse with alternatives, using
        Parboiled2's JSON parsing benchmark, which parses a ~21,500 line JSON file:

    @table(width := "100%", cls := "pure-table")
        @thead
            @th{Benchmark}@th{Score}
        @tbody
            @tr
                @td{fastparse}@td{159.5}
            @tr
                @td{circe}@td{332.4}
            @tr
                @td{argonaut}@td{149.1}
            @tr
                @td{uJson}@td{266.6}
            @tr
                @td{json4s}@td{100.9}
            @tr
                @td{play-json}@td{226.6}
            @tr
                @td{scala-parser-combinators}@td{0.9}


    @p
        These numbers are the number of iterations/second of parsing a sample
        @code{test.json} file, averaged over 200 runs. As you can see, the
        FastParse based parser comes within a factor of 4 of the fastest hand
        written parser (Jackson), is just as fast as the Parboiled2 based
        parser (slightly faster/slower depending if full tracing is enabled),
        and is almost 100x faster than the scala-parser-combinators library.

    @p
        In exchange for the perf hit compared to hand-rolled solutions, you get
        the @sect.ref("Json", "short, super-simple parser definition"), and
        excellent error free error reporting. While for super-high-performance
        use cases you may still want a hand-rolled parser, for many ad-hoc
        situations a FastParse parser would do just fine.

    @p
        A similar speed ratio can be seen in parsing a
        @a("sample Scala file", href:="https://github.com/scala-js/scala-js/blob/master/compiler/src/main/scala/org/scalajs/core/compiler/GenJSCode.scala")
        comparing FastParse andScalac's inbuilt hand-written Scala-language parser:

    @table(width := "100%", cls := "pure-table")
        @thead
            @th{Benchmark}@th{Score}
        @tbody
            @tr
                @td{fastparse}@td{203}
            @tr
                @td{scalac}@td{754}

    @p
        Or comparing Fastparse's Python parser with the Jython Python parser:

    @table(width := "100%", cls := "pure-table")
        @thead
            @th{Benchmark}@th{Score}
        @tbody
            @tr
                @td{fastparse}@td{406}
            @tr
                @td{jython}@td{472}
    @p
        In all these cases, you can see that the iterations-per-second
        performance of Fastparse parsers is comparable to various production
        quality parsers. While the Fastparse parser may be a few times slower,
        it is nonetheless competitive, and at the same time is usually less
        than 1/10th as much code to write, understand and debug.

    @sect{Improving Performance}

        @p
            There are many ways to improve performance of your FastParse parsers.
            If you study the example parsers included in the repo, those already
            have many of these techniques applied, and if you follow the same style
            you'll probably do ok. Nevertheless, here are some concrete tips:

        @ul
            @li
                @b{Understand your Parser's behavior}: using @sect.ref{Log}, or
                by @code{Instrumenting Parsers}. Often poor performance is due
                to parsers doing the wrong thing: attempting more alternatives
                than they need to, or backtracking and repeating the same
                parse many times. Understanding the flow of how your parser works
                is the first step in identifying these issues and fixing them

            @li
                @b{Avoid Backtracking}: FastParse parsers have unlimited backtracking,
                which is convenient for getting something working initially, but
                inconvenient when you want things to be fast. If you have a parser
                with lots of backtracking, see if you can factor out parts of it
                so they only get parsed once, e.g. turning @code{a ~ b | a ~ c} into
                @code{a ~ (b | c)}

            @li
                @b{Use @sect.ref{Cuts}}: although you can remove backtracking manually,
                it is easy to make a mistake and miss some of it, or for backtracking
                to creep back in as you make further changes to your parser. Cuts
                prevent that, ensuring that your parser never backtracks past certain
                points no matter what.

            @li
                @b{Use @sect.ref{Utilities}}: things like @sect.ref{CharPred},
                @sect.ref{CharIn}, @sect.ref{CharsWhile}, @sect.ref{StringIn},
                @sect.ref{CharsWhileIn} are orders of magnitude faster than
                implementing their behavior yourself with @code{|} and @code{.rep}.
                Use them where-ever possible

    @sect{Profiling}
        @p
            Since FastParse Parsers are just methods, you can use standard
            profiling techniques to show where in the parser time is being
            spent. For example, here is the @lnk("JProfiler", "https://www.ej-technologies.com/products/jprofiler/overview.html")
            profile of the @sect.ref{ScalaParse} Scala syntax parser:

        @img(width := "100%", src := "JProfiler.png")

        @p
            Using standard tools, you can easily dig into what parts of your
            parser are slow and why